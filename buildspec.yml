version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: 20
    commands:
      - echo "Iniciando fase de instalação..."
      - npm install
      
  pre_build:
    commands:
      - echo "Iniciando fase de pré-build..."

  build:
    commands:
      - echo "Iniciando fase de build..."
      - npm run build

      - echo "Sincronizando assets estáticos com o S3..."
      # Seu Terraform já define as variáveis AWS_S3_BUCKET_TARGET_NAME_1 para o bucket estático
      - aws s3 sync ./public/ s3://${AWS_S3_BUCKET_TARGET_NAME_1}/ --delete
      - aws s3 sync ./.next/static/ s3://${AWS_S3_BUCKET_TARGET_NAME_1}/_next/static/ --delete

  post_build:
    commands:
      - echo "Fase de build concluída com sucesso!"

artifacts:
  files:
    # --- AJUSTE PRINCIPAL ---
    # Para o servidor SSR (Server-Side Rendering), precisamos APENAS dos arquivos
    # essenciais para rodar o servidor, não dos arquivos estáticos que já foram para o S3.
    # O diretório '.next/standalone' é otimizado para isso quando configurado.
    # Se não usar 'standalone', precisamos do '.next/server'.
    - '.next/server/**/*'
    - '.next/package.json' # Em alguns modos de build, um package.json otimizado é criado aqui
    - 'node_modules/**/*'
    - 'package.json'
    - 'package-lock.json'
    # Inclui o arquivo de configuração do CodeDeploy na raiz do artefato
    - 'appspec.yml'
    # Inclui a pasta com todos os scripts de deploy
    - 'scripts/**/*'
  # --- AJUSTE CRUCIAL ---
  # 'discard-paths' remove os caminhos originais. Usar 'no' garante que um arquivo em 'scripts/start.sh'
  # seja colocado como 'scripts/start.sh' no artefato, em vez de apenas 'start.sh'.
  discard-paths: no
