version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: 20
    commands:
      - echo "Iniciando fase de instalação..."
      - npm install
      
  pre_build:
    commands:
      - echo "Iniciando fase de pré-build..."

  build:
    commands:
      - echo "Iniciando fase de build..."
      - npm run build

      - echo "Sincronizando assets estáticos com o S3..."
      # Seu Terraform já define as variáveis AWS_S3_BUCKET_TARGET_NAME_1 para o bucket estático
      - aws s3 sync ./public/ s3://${AWS_S3_BUCKET_TARGET_NAME_1}/ --delete
      - aws s3 sync ./.next/static/ s3://${AWS_S3_BUCKET_TARGET_NAME_1}/_next/static/ --delete

  post_build:
    commands:
      - echo "Fase de build concluída."
      # --- VERIFICAÇÃO ADICIONADA ---
      # Imprime o conteúdo do appspec.yml para garantir que ele existe e está acessível.
      # Se este comando falhar, significa que o arquivo não está na raiz do projeto.
      - echo "Verificando o conteúdo do appspec.yml..."
      - echo "Listando todos os arquivos e pastas na raiz do projeto para depuração..."
      - ls -la
      - cat appspec.yml
      - echo "Verificação do appspec.yml concluída."

artifacts:
  files:
    # Arquivos essenciais para rodar o servidor SSR
    - '.next/server/**/*'
    - '.next/package.json' 
    
    # Arquivos de configuração do projeto necessários em produção
    - 'package.json'
    - 'package-lock.json'
    
    # Arquivos para o CodeDeploy
    - 'appspec.yml'
    - 'scripts/**/*'
    
  # 'discard-paths: no' é crucial para manter a estrutura de pastas (appspec.yml na raiz)
  discard-paths: no
